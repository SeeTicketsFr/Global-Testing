/* tslint:disable */
/* eslint-disable */
/**
 * Global Testing
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiSqsStepsGetCollection200Response } from '../models';
// @ts-ignore
import { SqsStep } from '../models';
// @ts-ignore
import { SqsStepJsonld } from '../models';
// @ts-ignore
import { SqsStepJsonldSqsstepReadStepRead } from '../models';
/**
 * SqsStepApi - axios parameter creator
 * @export
 */

export const SqsStepApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of SqsStep resources.
         * @summary Retrieves the collection of SqsStep resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sqsStepsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sqs_steps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the SqsStep resource.
         * @summary Removes the SqsStep resource.
         * @param {string} id SqsStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sqsStepsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sqsStepsIdDelete', 'id', id)
            const localVarPath = `/api/sqs_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a SqsStep resource.
         * @summary Retrieves a SqsStep resource.
         * @param {string} id SqsStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sqsStepsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sqsStepsIdGet', 'id', id)
            const localVarPath = `/api/sqs_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the SqsStep resource.
         * @summary Updates the SqsStep resource.
        * @param {string} id
        * @param data SqsStep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sqsStepsIdPatch: async (id: string, data: SqsStep, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sqsStep' is not null or undefined
            assertParamExists('sqsStepsIdPatch', 'id', id)
            assertParamExists('sqsStepsIdPatch', 'data', data)
            const localVarPath = `/api/sqs_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the SqsStep resource.
         * @summary Replaces the SqsStep resource.
        * @param {string} id
        * @param data SqsStepJsonld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sqsStepsIdPut: async (id: string, data: SqsStepJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sqsStepJsonld' is not null or undefined
            assertParamExists('sqsStepsIdPut', 'id', id)
            assertParamExists('sqsStepsIdPut', 'data', data)
            const localVarPath = `/api/sqs_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a SqsStep resource.
         * @summary Creates a SqsStep resource.
        * @param {SqsStepJsonld} data The new SqsStep resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sqsStepsPost: async (data: SqsStepJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sqsStepJsonld' is not null or undefined
            assertParamExists('sqsStepsPost', 'data', data)
            const localVarPath = `/api/sqs_steps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * SqsStepApi - functional programming interface
 * @export
 */
export const SqsStepApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SqsStepApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of SqsStep resources.
         * @summary Retrieves the collection of SqsStep resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async sqsStepsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSqsStepsGetCollection200Response>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.sqsStepsGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the SqsStep resource.
         * @summary Removes the SqsStep resource.
         * @param {string} id SqsStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async sqsStepsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.sqsStepsIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a SqsStep resource.
         * @summary Retrieves a SqsStep resource.
         * @param {string} id SqsStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async sqsStepsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqsStepJsonldSqsstepReadStepRead>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.sqsStepsIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the SqsStep resource.
         * @summary Updates the SqsStep resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async sqsStepsIdPatch(id: string, data: SqsStep, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqsStepJsonldSqsstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.sqsStepsIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the SqsStep resource.
         * @summary Replaces the SqsStep resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async sqsStepsIdPut(id: string, data: SqsStepJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqsStepJsonldSqsstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.sqsStepsIdPut(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a SqsStep resource.
         * @summary Creates a SqsStep resource.
                    * @param {SqsStepJsonld} data The new SqsStep resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async sqsStepsPost(data: SqsStepJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SqsStepJsonldSqsstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.sqsStepsPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Request parameters for sqsStepsGetCollection operation in SqsStepApi.
 * @export
 * @interface SqsStepApiSqsStepsGetCollectionRequest
 */
export interface SqsStepApiSqsStepsGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof SqsStepApiSqsStepsGetCollection
     */
    readonly page?: number
}
/**
 * Request parameters for sqsStepsIdDelete operation in SqsStepApi.
 * @export
 * @interface SqsStepApiSqsStepsIdDeleteRequest
 */
export interface SqsStepApiSqsStepsIdDeleteRequest {
    /**
     * SqsStep identifier
     * @type {string}
     * @memberof SqsStepApiSqsStepsIdDelete
     */
    readonly id: string
}
/**
 * Request parameters for sqsStepsIdGet operation in SqsStepApi.
 * @export
 * @interface SqsStepApiSqsStepsIdGetRequest
 */
export interface SqsStepApiSqsStepsIdGetRequest {
    /**
     * SqsStep identifier
     * @type {string}
     * @memberof SqsStepApiSqsStepsIdGet
     */
    readonly id: string
}
/**
 * Request parameters for sqsStepsIdPatch operation in SqsStepApi.
 * @export
 * @interface SqsStepApiSqsStepsIdPatchRequest
 */
export interface SqsStepApiSqsStepsIdPatchRequest {
    /**
    * The updated SqsStep resource
    * @type {SqsStep}
    * @memberof SqsStepApiSqsStepsIdPatch
    */
    readonly id: string
    readonly data: SqsStep
}
/**
 * Request parameters for sqsStepsIdPut operation in SqsStepApi.
 * @export
 * @interface SqsStepApiSqsStepsIdPutRequest
 */
export interface SqsStepApiSqsStepsIdPutRequest {
    /**
    * The updated SqsStep resource
    * @type {SqsStepJsonld}
    * @memberof SqsStepApiSqsStepsIdPut
    */
    readonly id: string
    readonly data: SqsStepJsonld
}
/**
 * Request parameters for sqsStepsPost operation in SqsStepApi.
 * @export
 * @interface SqsStepApiSqsStepsPostRequest
 */
export interface SqsStepApiSqsStepsPostRequest {
    /**
    * The new SqsStep resource
    * @type {SqsStepJsonld}
    * @memberof SqsStepApiSqsStepsPost
    */
    readonly data: SqsStepJsonld
}
/**
 * SqsStepApi - object-oriented interface
 * @export
 * @class SqsStepApi
 * @extends {BaseAPI}
 */
export class SqsStepApi extends BaseAPI {
    /**
     * Retrieves the collection of SqsStep resources.
     * @summary Retrieves the collection of SqsStep resources.
     * @param {SqsStepApiSqsStepsGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SqsStepApi
     */
    public sqsStepsGetCollection(requestParameters: SqsStepApiSqsStepsGetCollectionRequest = {}, options?: AxiosRequestConfig) {

        return SqsStepApiFp(this.configuration).sqsStepsGetCollection(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the SqsStep resource.
     * @summary Removes the SqsStep resource.
     * @param {SqsStepApiSqsStepsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SqsStepApi
     */
    public sqsStepsIdDelete(requestParameters: SqsStepApiSqsStepsIdDeleteRequest, options?: AxiosRequestConfig) {

        return SqsStepApiFp(this.configuration).sqsStepsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a SqsStep resource.
     * @summary Retrieves a SqsStep resource.
     * @param {SqsStepApiSqsStepsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SqsStepApi
     */
    public sqsStepsIdGet(requestParameters: SqsStepApiSqsStepsIdGetRequest, options?: AxiosRequestConfig) {

        return SqsStepApiFp(this.configuration).sqsStepsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the SqsStep resource.
     * @summary Updates the SqsStep resource.
     * @param {SqsStepApiSqsStepsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SqsStepApi
     */
    public sqsStepsIdPatch(requestParameters: SqsStepApiSqsStepsIdPatchRequest, options?: AxiosRequestConfig) {

    return SqsStepApiFp(this.configuration).sqsStepsIdPatch(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the SqsStep resource.
     * @summary Replaces the SqsStep resource.
     * @param {SqsStepApiSqsStepsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SqsStepApi
     */
    public sqsStepsIdPut(requestParameters: SqsStepApiSqsStepsIdPutRequest, options?: AxiosRequestConfig) {

    return SqsStepApiFp(this.configuration).sqsStepsIdPut(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a SqsStep resource.
     * @summary Creates a SqsStep resource.
     * @param {SqsStepApiSqsStepsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SqsStepApi
     */
    public sqsStepsPost(requestParameters: SqsStepApiSqsStepsPostRequest, options?: AxiosRequestConfig) {

    return SqsStepApiFp(this.configuration).sqsStepsPost(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}

