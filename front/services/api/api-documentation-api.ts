/* tslint:disable */
/* eslint-disable */
/**
 * Global Testing
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiApiDocumentationsGetCollection200Response } from '../models';
// @ts-ignore
import { ApiDocumentation } from '../models';
// @ts-ignore
import { ApiDocumentationApiDocumentationFileOutputJsonldApidocumentationRead } from '../models';
// @ts-ignore
import { ApiDocumentationJsonld } from '../models';
// @ts-ignore
import { ApiDocumentationJsonldApidocumentationRead } from '../models';
/**
 * ApiDocumentationApi - axios parameter creator
 * @export
 */

export const ApiDocumentationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ApiDocumentation resources.
         * @summary Retrieves the collection of ApiDocumentation resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            apiDocumentationsGetCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/api_documentations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the ApiDocumentation resource.
         * @summary Removes the ApiDocumentation resource.
         * @param {string} id ApiDocumentation identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            apiDocumentationsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDocumentationsIdDelete', 'id', id)
            const localVarPath = `/api/api_documentations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ApiDocumentation resource.
         * @summary Retrieves a ApiDocumentation resource.
         * @param {string} id ApiDocumentation identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            apiDocumentationsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDocumentationsIdGet', 'id', id)
            const localVarPath = `/api/api_documentations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the ApiDocumentation resource.
         * @summary Updates the ApiDocumentation resource.
        * @param {string} id
        * @param data ApiDocumentation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            apiDocumentationsIdPatch: async (id: string, data: ApiDocumentation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiDocumentation' is not null or undefined
            assertParamExists('apiDocumentationsIdPatch', 'id', id)
            assertParamExists('apiDocumentationsIdPatch', 'data', data)
            const localVarPath = `/api/api_documentations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ApiDocumentation resource.
         * @summary Replaces the ApiDocumentation resource.
        * @param {string} id
        * @param data ApiDocumentationJsonld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            apiDocumentationsIdPut: async (id: string, data: ApiDocumentationJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiDocumentationJsonld' is not null or undefined
            assertParamExists('apiDocumentationsIdPut', 'id', id)
            assertParamExists('apiDocumentationsIdPut', 'data', data)
            const localVarPath = `/api/api_documentations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ApiDocumentation resource.
         * @summary Retrieves a ApiDocumentation resource.
         * @param {string} id ApiDocumentation identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            apiDocumentationsIdfileGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiDocumentationsIdfileGet', 'id', id)
            const localVarPath = `/api/api_documentations/{id}/file`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ApiDocumentation resource.
         * @summary Creates a ApiDocumentation resource.
        * @param {ApiDocumentationJsonld} data The new ApiDocumentation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            apiDocumentationsPost: async (data: ApiDocumentationJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiDocumentationJsonld' is not null or undefined
            assertParamExists('apiDocumentationsPost', 'data', data)
            const localVarPath = `/api/api_documentations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * ApiDocumentationApi - functional programming interface
 * @export
 */
export const ApiDocumentationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiDocumentationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ApiDocumentation resources.
         * @summary Retrieves the collection of ApiDocumentation resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async apiDocumentationsGetCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiApiDocumentationsGetCollection200Response>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentationsGetCollection(page, itemsPerPage, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the ApiDocumentation resource.
         * @summary Removes the ApiDocumentation resource.
         * @param {string} id ApiDocumentation identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async apiDocumentationsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentationsIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ApiDocumentation resource.
         * @summary Retrieves a ApiDocumentation resource.
         * @param {string} id ApiDocumentation identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async apiDocumentationsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDocumentationJsonldApidocumentationRead>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentationsIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the ApiDocumentation resource.
         * @summary Updates the ApiDocumentation resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async apiDocumentationsIdPatch(id: string, data: ApiDocumentation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDocumentationJsonldApidocumentationRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentationsIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ApiDocumentation resource.
         * @summary Replaces the ApiDocumentation resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async apiDocumentationsIdPut(id: string, data: ApiDocumentationJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDocumentationJsonldApidocumentationRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentationsIdPut(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ApiDocumentation resource.
         * @summary Retrieves a ApiDocumentation resource.
         * @param {string} id ApiDocumentation identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async apiDocumentationsIdfileGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDocumentationApiDocumentationFileOutputJsonldApidocumentationRead>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentationsIdfileGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ApiDocumentation resource.
         * @summary Creates a ApiDocumentation resource.
                    * @param {ApiDocumentationJsonld} data The new ApiDocumentation resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async apiDocumentationsPost(data: ApiDocumentationJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiDocumentationJsonldApidocumentationRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentationsPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Request parameters for apiDocumentationsGetCollection operation in ApiDocumentationApi.
 * @export
 * @interface ApiDocumentationApiApiDocumentationsGetCollectionRequest
 */
export interface ApiDocumentationApiApiDocumentationsGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ApiDocumentationApiApiDocumentationsGetCollection
     */
    readonly page?: number
    /**
     * The number of items per page
     * @type {number}
     * @memberof ApiDocumentationApiApiDocumentationsGetCollection
     */
    readonly itemsPerPage?: number
}
/**
 * Request parameters for apiDocumentationsIdDelete operation in ApiDocumentationApi.
 * @export
 * @interface ApiDocumentationApiApiDocumentationsIdDeleteRequest
 */
export interface ApiDocumentationApiApiDocumentationsIdDeleteRequest {
    /**
     * ApiDocumentation identifier
     * @type {string}
     * @memberof ApiDocumentationApiApiDocumentationsIdDelete
     */
    readonly id: string
}
/**
 * Request parameters for apiDocumentationsIdGet operation in ApiDocumentationApi.
 * @export
 * @interface ApiDocumentationApiApiDocumentationsIdGetRequest
 */
export interface ApiDocumentationApiApiDocumentationsIdGetRequest {
    /**
     * ApiDocumentation identifier
     * @type {string}
     * @memberof ApiDocumentationApiApiDocumentationsIdGet
     */
    readonly id: string
}
/**
 * Request parameters for apiDocumentationsIdPatch operation in ApiDocumentationApi.
 * @export
 * @interface ApiDocumentationApiApiDocumentationsIdPatchRequest
 */
export interface ApiDocumentationApiApiDocumentationsIdPatchRequest {
    /**
    * The updated ApiDocumentation resource
    * @type {ApiDocumentation}
    * @memberof ApiDocumentationApiApiDocumentationsIdPatch
    */
    readonly id: string
    readonly data: ApiDocumentation
}
/**
 * Request parameters for apiDocumentationsIdPut operation in ApiDocumentationApi.
 * @export
 * @interface ApiDocumentationApiApiDocumentationsIdPutRequest
 */
export interface ApiDocumentationApiApiDocumentationsIdPutRequest {
    /**
    * The updated ApiDocumentation resource
    * @type {ApiDocumentationJsonld}
    * @memberof ApiDocumentationApiApiDocumentationsIdPut
    */
    readonly id: string
    readonly data: ApiDocumentationJsonld
}
/**
 * Request parameters for apiDocumentationsIdfileGet operation in ApiDocumentationApi.
 * @export
 * @interface ApiDocumentationApiApiDocumentationsIdfileGetRequest
 */
export interface ApiDocumentationApiApiDocumentationsIdfileGetRequest {
    /**
     * ApiDocumentation identifier
     * @type {string}
     * @memberof ApiDocumentationApiApiDocumentationsIdfileGet
     */
    readonly id: string
}
/**
 * Request parameters for apiDocumentationsPost operation in ApiDocumentationApi.
 * @export
 * @interface ApiDocumentationApiApiDocumentationsPostRequest
 */
export interface ApiDocumentationApiApiDocumentationsPostRequest {
    /**
    * The new ApiDocumentation resource
    * @type {ApiDocumentationJsonld}
    * @memberof ApiDocumentationApiApiDocumentationsPost
    */
    readonly data: ApiDocumentationJsonld
}
/**
 * ApiDocumentationApi - object-oriented interface
 * @export
 * @class ApiDocumentationApi
 * @extends {BaseAPI}
 */
export class ApiDocumentationApi extends BaseAPI {
    /**
     * Retrieves the collection of ApiDocumentation resources.
     * @summary Retrieves the collection of ApiDocumentation resources.
     * @param {ApiDocumentationApiApiDocumentationsGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocumentationApi
     */
    public apiDocumentationsGetCollection(requestParameters: ApiDocumentationApiApiDocumentationsGetCollectionRequest = {}, options?: AxiosRequestConfig) {

        return ApiDocumentationApiFp(this.configuration).apiDocumentationsGetCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the ApiDocumentation resource.
     * @summary Removes the ApiDocumentation resource.
     * @param {ApiDocumentationApiApiDocumentationsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocumentationApi
     */
    public apiDocumentationsIdDelete(requestParameters: ApiDocumentationApiApiDocumentationsIdDeleteRequest, options?: AxiosRequestConfig) {

        return ApiDocumentationApiFp(this.configuration).apiDocumentationsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ApiDocumentation resource.
     * @summary Retrieves a ApiDocumentation resource.
     * @param {ApiDocumentationApiApiDocumentationsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocumentationApi
     */
    public apiDocumentationsIdGet(requestParameters: ApiDocumentationApiApiDocumentationsIdGetRequest, options?: AxiosRequestConfig) {

        return ApiDocumentationApiFp(this.configuration).apiDocumentationsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the ApiDocumentation resource.
     * @summary Updates the ApiDocumentation resource.
     * @param {ApiDocumentationApiApiDocumentationsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocumentationApi
     */
    public apiDocumentationsIdPatch(requestParameters: ApiDocumentationApiApiDocumentationsIdPatchRequest, options?: AxiosRequestConfig) {

    return ApiDocumentationApiFp(this.configuration).apiDocumentationsIdPatch(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ApiDocumentation resource.
     * @summary Replaces the ApiDocumentation resource.
     * @param {ApiDocumentationApiApiDocumentationsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocumentationApi
     */
    public apiDocumentationsIdPut(requestParameters: ApiDocumentationApiApiDocumentationsIdPutRequest, options?: AxiosRequestConfig) {

    return ApiDocumentationApiFp(this.configuration).apiDocumentationsIdPut(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ApiDocumentation resource.
     * @summary Retrieves a ApiDocumentation resource.
     * @param {ApiDocumentationApiApiDocumentationsIdfileGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocumentationApi
     */
    public apiDocumentationsIdfileGet(requestParameters: ApiDocumentationApiApiDocumentationsIdfileGetRequest, options?: AxiosRequestConfig) {

        return ApiDocumentationApiFp(this.configuration).apiDocumentationsIdfileGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ApiDocumentation resource.
     * @summary Creates a ApiDocumentation resource.
     * @param {ApiDocumentationApiApiDocumentationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiDocumentationApi
     */
    public apiDocumentationsPost(requestParameters: ApiDocumentationApiApiDocumentationsPostRequest, options?: AxiosRequestConfig) {

    return ApiDocumentationApiFp(this.configuration).apiDocumentationsPost(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}

