/* tslint:disable */
/* eslint-disable */
/**
 * Global Testing
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiLoopStepsGetCollection200Response } from '../models';
// @ts-ignore
import { LoopStep } from '../models';
// @ts-ignore
import { LoopStepJsonld } from '../models';
// @ts-ignore
import { LoopStepJsonldLoopstepReadStepRead } from '../models';
/**
 * LoopStepApi - axios parameter creator
 * @export
 */

export const LoopStepApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of LoopStep resources.
         * @summary Retrieves the collection of LoopStep resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            loopStepsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/loop_steps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the LoopStep resource.
         * @summary Removes the LoopStep resource.
         * @param {string} id LoopStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            loopStepsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('loopStepsIdDelete', 'id', id)
            const localVarPath = `/api/loop_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a LoopStep resource.
         * @summary Retrieves a LoopStep resource.
         * @param {string} id LoopStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            loopStepsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('loopStepsIdGet', 'id', id)
            const localVarPath = `/api/loop_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the LoopStep resource.
         * @summary Updates the LoopStep resource.
        * @param {string} id
        * @param data LoopStep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            loopStepsIdPatch: async (id: string, data: LoopStep, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loopStep' is not null or undefined
            assertParamExists('loopStepsIdPatch', 'id', id)
            assertParamExists('loopStepsIdPatch', 'data', data)
            const localVarPath = `/api/loop_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the LoopStep resource.
         * @summary Replaces the LoopStep resource.
        * @param {string} id
        * @param data LoopStepJsonld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            loopStepsIdPut: async (id: string, data: LoopStepJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loopStepJsonld' is not null or undefined
            assertParamExists('loopStepsIdPut', 'id', id)
            assertParamExists('loopStepsIdPut', 'data', data)
            const localVarPath = `/api/loop_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a LoopStep resource.
         * @summary Creates a LoopStep resource.
        * @param {LoopStepJsonld} data The new LoopStep resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            loopStepsPost: async (data: LoopStepJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loopStepJsonld' is not null or undefined
            assertParamExists('loopStepsPost', 'data', data)
            const localVarPath = `/api/loop_steps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * LoopStepApi - functional programming interface
 * @export
 */
export const LoopStepApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoopStepApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of LoopStep resources.
         * @summary Retrieves the collection of LoopStep resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async loopStepsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLoopStepsGetCollection200Response>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.loopStepsGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the LoopStep resource.
         * @summary Removes the LoopStep resource.
         * @param {string} id LoopStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async loopStepsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.loopStepsIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a LoopStep resource.
         * @summary Retrieves a LoopStep resource.
         * @param {string} id LoopStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async loopStepsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopStepJsonldLoopstepReadStepRead>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.loopStepsIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the LoopStep resource.
         * @summary Updates the LoopStep resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async loopStepsIdPatch(id: string, data: LoopStep, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopStepJsonldLoopstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.loopStepsIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the LoopStep resource.
         * @summary Replaces the LoopStep resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async loopStepsIdPut(id: string, data: LoopStepJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopStepJsonldLoopstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.loopStepsIdPut(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a LoopStep resource.
         * @summary Creates a LoopStep resource.
                    * @param {LoopStepJsonld} data The new LoopStep resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async loopStepsPost(data: LoopStepJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopStepJsonldLoopstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.loopStepsPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Request parameters for loopStepsGetCollection operation in LoopStepApi.
 * @export
 * @interface LoopStepApiLoopStepsGetCollectionRequest
 */
export interface LoopStepApiLoopStepsGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof LoopStepApiLoopStepsGetCollection
     */
    readonly page?: number
}
/**
 * Request parameters for loopStepsIdDelete operation in LoopStepApi.
 * @export
 * @interface LoopStepApiLoopStepsIdDeleteRequest
 */
export interface LoopStepApiLoopStepsIdDeleteRequest {
    /**
     * LoopStep identifier
     * @type {string}
     * @memberof LoopStepApiLoopStepsIdDelete
     */
    readonly id: string
}
/**
 * Request parameters for loopStepsIdGet operation in LoopStepApi.
 * @export
 * @interface LoopStepApiLoopStepsIdGetRequest
 */
export interface LoopStepApiLoopStepsIdGetRequest {
    /**
     * LoopStep identifier
     * @type {string}
     * @memberof LoopStepApiLoopStepsIdGet
     */
    readonly id: string
}
/**
 * Request parameters for loopStepsIdPatch operation in LoopStepApi.
 * @export
 * @interface LoopStepApiLoopStepsIdPatchRequest
 */
export interface LoopStepApiLoopStepsIdPatchRequest {
    /**
    * The updated LoopStep resource
    * @type {LoopStep}
    * @memberof LoopStepApiLoopStepsIdPatch
    */
    readonly id: string
    readonly data: LoopStep
}
/**
 * Request parameters for loopStepsIdPut operation in LoopStepApi.
 * @export
 * @interface LoopStepApiLoopStepsIdPutRequest
 */
export interface LoopStepApiLoopStepsIdPutRequest {
    /**
    * The updated LoopStep resource
    * @type {LoopStepJsonld}
    * @memberof LoopStepApiLoopStepsIdPut
    */
    readonly id: string
    readonly data: LoopStepJsonld
}
/**
 * Request parameters for loopStepsPost operation in LoopStepApi.
 * @export
 * @interface LoopStepApiLoopStepsPostRequest
 */
export interface LoopStepApiLoopStepsPostRequest {
    /**
    * The new LoopStep resource
    * @type {LoopStepJsonld}
    * @memberof LoopStepApiLoopStepsPost
    */
    readonly data: LoopStepJsonld
}
/**
 * LoopStepApi - object-oriented interface
 * @export
 * @class LoopStepApi
 * @extends {BaseAPI}
 */
export class LoopStepApi extends BaseAPI {
    /**
     * Retrieves the collection of LoopStep resources.
     * @summary Retrieves the collection of LoopStep resources.
     * @param {LoopStepApiLoopStepsGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoopStepApi
     */
    public loopStepsGetCollection(requestParameters: LoopStepApiLoopStepsGetCollectionRequest = {}, options?: AxiosRequestConfig) {

        return LoopStepApiFp(this.configuration).loopStepsGetCollection(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the LoopStep resource.
     * @summary Removes the LoopStep resource.
     * @param {LoopStepApiLoopStepsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoopStepApi
     */
    public loopStepsIdDelete(requestParameters: LoopStepApiLoopStepsIdDeleteRequest, options?: AxiosRequestConfig) {

        return LoopStepApiFp(this.configuration).loopStepsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a LoopStep resource.
     * @summary Retrieves a LoopStep resource.
     * @param {LoopStepApiLoopStepsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoopStepApi
     */
    public loopStepsIdGet(requestParameters: LoopStepApiLoopStepsIdGetRequest, options?: AxiosRequestConfig) {

        return LoopStepApiFp(this.configuration).loopStepsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the LoopStep resource.
     * @summary Updates the LoopStep resource.
     * @param {LoopStepApiLoopStepsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoopStepApi
     */
    public loopStepsIdPatch(requestParameters: LoopStepApiLoopStepsIdPatchRequest, options?: AxiosRequestConfig) {

    return LoopStepApiFp(this.configuration).loopStepsIdPatch(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the LoopStep resource.
     * @summary Replaces the LoopStep resource.
     * @param {LoopStepApiLoopStepsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoopStepApi
     */
    public loopStepsIdPut(requestParameters: LoopStepApiLoopStepsIdPutRequest, options?: AxiosRequestConfig) {

    return LoopStepApiFp(this.configuration).loopStepsIdPut(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a LoopStep resource.
     * @summary Creates a LoopStep resource.
     * @param {LoopStepApiLoopStepsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoopStepApi
     */
    public loopStepsPost(requestParameters: LoopStepApiLoopStepsPostRequest, options?: AxiosRequestConfig) {

    return LoopStepApiFp(this.configuration).loopStepsPost(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}

