/* tslint:disable */
/* eslint-disable */
/**
 * Global Testing
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiWebhooksGetCollection200Response } from '../models';
// @ts-ignore
import { Webhook } from '../models';
// @ts-ignore
import { WebhookJsonld } from '../models';
// @ts-ignore
import { WebhookJsonldWebhookRead } from '../models';
/**
 * WebhookApi - axios parameter creator
 * @export
 */

export const WebhookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Webhook resources.
         * @summary Retrieves the collection of Webhook resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            webhooksGetCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Webhook resource.
         * @summary Removes the Webhook resource.
         * @param {string} id Webhook identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            webhooksIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksIdDelete', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Webhook resource.
         * @summary Retrieves a Webhook resource.
         * @param {string} id Webhook identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            webhooksIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhooksIdGet', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Webhook resource.
         * @summary Updates the Webhook resource.
        * @param {string} id
        * @param data Webhook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            webhooksIdPatch: async (id: string, data: Webhook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhook' is not null or undefined
            assertParamExists('webhooksIdPatch', 'id', id)
            assertParamExists('webhooksIdPatch', 'data', data)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Webhook resource.
         * @summary Replaces the Webhook resource.
        * @param {string} id
        * @param data WebhookJsonld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            webhooksIdPut: async (id: string, data: WebhookJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookJsonld' is not null or undefined
            assertParamExists('webhooksIdPut', 'id', id)
            assertParamExists('webhooksIdPut', 'data', data)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Webhook resource.
         * @summary Creates a Webhook resource.
        * @param {WebhookJsonld} data The new Webhook resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            webhooksPost: async (data: WebhookJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookJsonld' is not null or undefined
            assertParamExists('webhooksPost', 'data', data)
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Webhook resources.
         * @summary Retrieves the collection of Webhook resources.
         * @param {string} idScenario Webhook identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            webhooksscenariosIdScenarioGetCollection: async (idScenario: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idScenario' is not null or undefined
            assertParamExists('webhooksscenariosIdScenarioGetCollection', 'idScenario', idScenario)
            const localVarPath = `/api/webhooks/scenarios/{idScenario}`
                .replace(`{${"idScenario"}}`, encodeURIComponent(String(idScenario)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * WebhookApi - functional programming interface
 * @export
 */
export const WebhookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Webhook resources.
         * @summary Retrieves the collection of Webhook resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async webhooksGetCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiWebhooksGetCollection200Response>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksGetCollection(page, itemsPerPage, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Webhook resource.
         * @summary Removes the Webhook resource.
         * @param {string} id Webhook identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async webhooksIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Webhook resource.
         * @summary Retrieves a Webhook resource.
         * @param {string} id Webhook identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async webhooksIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookJsonldWebhookRead>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Webhook resource.
         * @summary Updates the Webhook resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async webhooksIdPatch(id: string, data: Webhook, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookJsonldWebhookRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Webhook resource.
         * @summary Replaces the Webhook resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async webhooksIdPut(id: string, data: WebhookJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookJsonldWebhookRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksIdPut(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Webhook resource.
         * @summary Creates a Webhook resource.
                    * @param {WebhookJsonld} data The new Webhook resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async webhooksPost(data: WebhookJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookJsonldWebhookRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Webhook resources.
         * @summary Retrieves the collection of Webhook resources.
         * @param {string} idScenario Webhook identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async webhooksscenariosIdScenarioGetCollection(idScenario: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiWebhooksGetCollection200Response>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksscenariosIdScenarioGetCollection(idScenario, page, itemsPerPage, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Request parameters for webhooksGetCollection operation in WebhookApi.
 * @export
 * @interface WebhookApiWebhooksGetCollectionRequest
 */
export interface WebhookApiWebhooksGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof WebhookApiWebhooksGetCollection
     */
    readonly page?: number
    /**
     * The number of items per page
     * @type {number}
     * @memberof WebhookApiWebhooksGetCollection
     */
    readonly itemsPerPage?: number
}
/**
 * Request parameters for webhooksIdDelete operation in WebhookApi.
 * @export
 * @interface WebhookApiWebhooksIdDeleteRequest
 */
export interface WebhookApiWebhooksIdDeleteRequest {
    /**
     * Webhook identifier
     * @type {string}
     * @memberof WebhookApiWebhooksIdDelete
     */
    readonly id: string
}
/**
 * Request parameters for webhooksIdGet operation in WebhookApi.
 * @export
 * @interface WebhookApiWebhooksIdGetRequest
 */
export interface WebhookApiWebhooksIdGetRequest {
    /**
     * Webhook identifier
     * @type {string}
     * @memberof WebhookApiWebhooksIdGet
     */
    readonly id: string
}
/**
 * Request parameters for webhooksIdPatch operation in WebhookApi.
 * @export
 * @interface WebhookApiWebhooksIdPatchRequest
 */
export interface WebhookApiWebhooksIdPatchRequest {
    /**
    * The updated Webhook resource
    * @type {Webhook}
    * @memberof WebhookApiWebhooksIdPatch
    */
    readonly id: string
    readonly data: Webhook
}
/**
 * Request parameters for webhooksIdPut operation in WebhookApi.
 * @export
 * @interface WebhookApiWebhooksIdPutRequest
 */
export interface WebhookApiWebhooksIdPutRequest {
    /**
    * The updated Webhook resource
    * @type {WebhookJsonld}
    * @memberof WebhookApiWebhooksIdPut
    */
    readonly id: string
    readonly data: WebhookJsonld
}
/**
 * Request parameters for webhooksPost operation in WebhookApi.
 * @export
 * @interface WebhookApiWebhooksPostRequest
 */
export interface WebhookApiWebhooksPostRequest {
    /**
    * The new Webhook resource
    * @type {WebhookJsonld}
    * @memberof WebhookApiWebhooksPost
    */
    readonly data: WebhookJsonld
}
/**
 * Request parameters for webhooksscenariosIdScenarioGetCollection operation in WebhookApi.
 * @export
 * @interface WebhookApiWebhooksscenariosIdScenarioGetCollectionRequest
 */
export interface WebhookApiWebhooksscenariosIdScenarioGetCollectionRequest {
    /**
     * Webhook identifier
     * @type {string}
     * @memberof WebhookApiWebhooksscenariosIdScenarioGetCollection
     */
    readonly idScenario: string
    /**
     * The collection page number
     * @type {number}
     * @memberof WebhookApiWebhooksscenariosIdScenarioGetCollection
     */
    readonly page?: number
    /**
     * The number of items per page
     * @type {number}
     * @memberof WebhookApiWebhooksscenariosIdScenarioGetCollection
     */
    readonly itemsPerPage?: number
}
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export class WebhookApi extends BaseAPI {
    /**
     * Retrieves the collection of Webhook resources.
     * @summary Retrieves the collection of Webhook resources.
     * @param {WebhookApiWebhooksGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhooksGetCollection(requestParameters: WebhookApiWebhooksGetCollectionRequest = {}, options?: AxiosRequestConfig) {

        return WebhookApiFp(this.configuration).webhooksGetCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Webhook resource.
     * @summary Removes the Webhook resource.
     * @param {WebhookApiWebhooksIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhooksIdDelete(requestParameters: WebhookApiWebhooksIdDeleteRequest, options?: AxiosRequestConfig) {

        return WebhookApiFp(this.configuration).webhooksIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Webhook resource.
     * @summary Retrieves a Webhook resource.
     * @param {WebhookApiWebhooksIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhooksIdGet(requestParameters: WebhookApiWebhooksIdGetRequest, options?: AxiosRequestConfig) {

        return WebhookApiFp(this.configuration).webhooksIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Webhook resource.
     * @summary Updates the Webhook resource.
     * @param {WebhookApiWebhooksIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhooksIdPatch(requestParameters: WebhookApiWebhooksIdPatchRequest, options?: AxiosRequestConfig) {

    return WebhookApiFp(this.configuration).webhooksIdPatch(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Webhook resource.
     * @summary Replaces the Webhook resource.
     * @param {WebhookApiWebhooksIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhooksIdPut(requestParameters: WebhookApiWebhooksIdPutRequest, options?: AxiosRequestConfig) {

    return WebhookApiFp(this.configuration).webhooksIdPut(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Webhook resource.
     * @summary Creates a Webhook resource.
     * @param {WebhookApiWebhooksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhooksPost(requestParameters: WebhookApiWebhooksPostRequest, options?: AxiosRequestConfig) {

    return WebhookApiFp(this.configuration).webhooksPost(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Webhook resources.
     * @summary Retrieves the collection of Webhook resources.
     * @param {WebhookApiWebhooksscenariosIdScenarioGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    public webhooksscenariosIdScenarioGetCollection(requestParameters: WebhookApiWebhooksscenariosIdScenarioGetCollectionRequest, options?: AxiosRequestConfig) {

        return WebhookApiFp(this.configuration).webhooksscenariosIdScenarioGetCollection(requestParameters.idScenario, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
}

