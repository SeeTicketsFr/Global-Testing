/* tslint:disable */
/* eslint-disable */
/**
 * Global Testing
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiScenariosGetCollection200Response } from '../models';
// @ts-ignore
import { ScenarioJsonldScenarioReadStepReadHttpstepReadLoopstepReadSleepstepReadSqsstepReadMetricsReadWebhookRead } from '../models';
// @ts-ignore
import { ScenarioJsonldScenarioWrite } from '../models';
// @ts-ignore
import { ScenarioScenarioWrite } from '../models';
/**
 * ScenarioApi - axios parameter creator
 * @export
 */

export const ScenarioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Import Scenario
        * @param {object} data Scenario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            importScenario: async (data: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('importScenario', 'data', data)
            const localVarPath = `/api/scenario/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Run Scenario
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            runScenario: async (scenarioId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/scenario/{scenarioId}/run`
                .replace(`{${"scenarioId"}}`, encodeURIComponent(String(scenarioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Scenario resources.
         * @summary Retrieves the collection of Scenario resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            scenariosGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/scenarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Scenario resource.
         * @summary Removes the Scenario resource.
         * @param {string} id Scenario identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            scenariosIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scenariosIdDelete', 'id', id)
            const localVarPath = `/api/scenarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Scenario resource.
         * @summary Retrieves a Scenario resource.
         * @param {string} id Scenario identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            scenariosIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scenariosIdGet', 'id', id)
            const localVarPath = `/api/scenarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Scenario resource.
         * @summary Updates the Scenario resource.
        * @param {string} id
        * @param data ScenarioScenarioWrite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            scenariosIdPatch: async (id: string, data: ScenarioScenarioWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scenarioScenarioWrite' is not null or undefined
            assertParamExists('scenariosIdPatch', 'id', id)
            assertParamExists('scenariosIdPatch', 'data', data)
            const localVarPath = `/api/scenarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Scenario resource.
         * @summary Replaces the Scenario resource.
        * @param {string} id
        * @param data ScenarioJsonldScenarioWrite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            scenariosIdPut: async (id: string, data: ScenarioJsonldScenarioWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scenarioJsonldScenarioWrite' is not null or undefined
            assertParamExists('scenariosIdPut', 'id', id)
            assertParamExists('scenariosIdPut', 'data', data)
            const localVarPath = `/api/scenarios/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Scenario resource.
         * @summary Creates a Scenario resource.
        * @param {ScenarioJsonldScenarioWrite} data The new Scenario resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            scenariosPost: async (data: ScenarioJsonldScenarioWrite, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scenarioJsonldScenarioWrite' is not null or undefined
            assertParamExists('scenariosPost', 'data', data)
            const localVarPath = `/api/scenarios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * ScenarioApi - functional programming interface
 * @export
 */
export const ScenarioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScenarioApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Import Scenario
                    * @param {object} data Scenario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async importScenario(data: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.importScenario(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Run Scenario
         * @param {string} [scenarioId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async runScenario(scenarioId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.runScenario(scenarioId, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Scenario resources.
         * @summary Retrieves the collection of Scenario resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async scenariosGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiScenariosGetCollection200Response>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.scenariosGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Scenario resource.
         * @summary Removes the Scenario resource.
         * @param {string} id Scenario identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async scenariosIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.scenariosIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Scenario resource.
         * @summary Retrieves a Scenario resource.
         * @param {string} id Scenario identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async scenariosIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioJsonldScenarioReadStepReadHttpstepReadLoopstepReadSleepstepReadSqsstepReadMetricsReadWebhookRead>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.scenariosIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Scenario resource.
         * @summary Updates the Scenario resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async scenariosIdPatch(id: string, data: ScenarioScenarioWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioJsonldScenarioReadStepReadHttpstepReadLoopstepReadSleepstepReadSqsstepReadMetricsReadWebhookRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.scenariosIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Scenario resource.
         * @summary Replaces the Scenario resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async scenariosIdPut(id: string, data: ScenarioJsonldScenarioWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioJsonldScenarioReadStepReadHttpstepReadLoopstepReadSleepstepReadSqsstepReadMetricsReadWebhookRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.scenariosIdPut(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Scenario resource.
         * @summary Creates a Scenario resource.
                    * @param {ScenarioJsonldScenarioWrite} data The new Scenario resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async scenariosPost(data: ScenarioJsonldScenarioWrite, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioJsonldScenarioReadStepReadHttpstepReadLoopstepReadSleepstepReadSqsstepReadMetricsReadWebhookRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.scenariosPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Request parameters for importScenario operation in ScenarioApi.
 * @export
 * @interface ScenarioApiImportScenarioRequest
 */
export interface ScenarioApiImportScenarioRequest {
    /**
    * Scenario
    * @type {object}
    * @memberof ScenarioApiImportScenario
    */
    readonly data: object
}
/**
 * Request parameters for runScenario operation in ScenarioApi.
 * @export
 * @interface ScenarioApiRunScenarioRequest
 */
export interface ScenarioApiRunScenarioRequest {
    /**
     * 
     * @type {string}
     * @memberof ScenarioApiRunScenario
     */
    readonly scenarioId?: string
}
/**
 * Request parameters for scenariosGetCollection operation in ScenarioApi.
 * @export
 * @interface ScenarioApiScenariosGetCollectionRequest
 */
export interface ScenarioApiScenariosGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ScenarioApiScenariosGetCollection
     */
    readonly page?: number
}
/**
 * Request parameters for scenariosIdDelete operation in ScenarioApi.
 * @export
 * @interface ScenarioApiScenariosIdDeleteRequest
 */
export interface ScenarioApiScenariosIdDeleteRequest {
    /**
     * Scenario identifier
     * @type {string}
     * @memberof ScenarioApiScenariosIdDelete
     */
    readonly id: string
}
/**
 * Request parameters for scenariosIdGet operation in ScenarioApi.
 * @export
 * @interface ScenarioApiScenariosIdGetRequest
 */
export interface ScenarioApiScenariosIdGetRequest {
    /**
     * Scenario identifier
     * @type {string}
     * @memberof ScenarioApiScenariosIdGet
     */
    readonly id: string
}
/**
 * Request parameters for scenariosIdPatch operation in ScenarioApi.
 * @export
 * @interface ScenarioApiScenariosIdPatchRequest
 */
export interface ScenarioApiScenariosIdPatchRequest {
    /**
    * The updated Scenario resource
    * @type {ScenarioScenarioWrite}
    * @memberof ScenarioApiScenariosIdPatch
    */
    readonly id: string
    readonly data: ScenarioScenarioWrite
}
/**
 * Request parameters for scenariosIdPut operation in ScenarioApi.
 * @export
 * @interface ScenarioApiScenariosIdPutRequest
 */
export interface ScenarioApiScenariosIdPutRequest {
    /**
    * The updated Scenario resource
    * @type {ScenarioJsonldScenarioWrite}
    * @memberof ScenarioApiScenariosIdPut
    */
    readonly id: string
    readonly data: ScenarioJsonldScenarioWrite
}
/**
 * Request parameters for scenariosPost operation in ScenarioApi.
 * @export
 * @interface ScenarioApiScenariosPostRequest
 */
export interface ScenarioApiScenariosPostRequest {
    /**
    * The new Scenario resource
    * @type {ScenarioJsonldScenarioWrite}
    * @memberof ScenarioApiScenariosPost
    */
    readonly data: ScenarioJsonldScenarioWrite
}
/**
 * ScenarioApi - object-oriented interface
 * @export
 * @class ScenarioApi
 * @extends {BaseAPI}
 */
export class ScenarioApi extends BaseAPI {
    /**
     * 
     * @summary Import Scenario
     * @param {ScenarioApiImportScenarioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public importScenario(requestParameters: ScenarioApiImportScenarioRequest, options?: AxiosRequestConfig) {

    return ScenarioApiFp(this.configuration).importScenario(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Run Scenario
     * @param {ScenarioApiRunScenarioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public runScenario(requestParameters: ScenarioApiRunScenarioRequest = {}, options?: AxiosRequestConfig) {

        return ScenarioApiFp(this.configuration).runScenario(requestParameters.scenarioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Scenario resources.
     * @summary Retrieves the collection of Scenario resources.
     * @param {ScenarioApiScenariosGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public scenariosGetCollection(requestParameters: ScenarioApiScenariosGetCollectionRequest = {}, options?: AxiosRequestConfig) {

        return ScenarioApiFp(this.configuration).scenariosGetCollection(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Scenario resource.
     * @summary Removes the Scenario resource.
     * @param {ScenarioApiScenariosIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public scenariosIdDelete(requestParameters: ScenarioApiScenariosIdDeleteRequest, options?: AxiosRequestConfig) {

        return ScenarioApiFp(this.configuration).scenariosIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Scenario resource.
     * @summary Retrieves a Scenario resource.
     * @param {ScenarioApiScenariosIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public scenariosIdGet(requestParameters: ScenarioApiScenariosIdGetRequest, options?: AxiosRequestConfig) {

        return ScenarioApiFp(this.configuration).scenariosIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Scenario resource.
     * @summary Updates the Scenario resource.
     * @param {ScenarioApiScenariosIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public scenariosIdPatch(requestParameters: ScenarioApiScenariosIdPatchRequest, options?: AxiosRequestConfig) {

    return ScenarioApiFp(this.configuration).scenariosIdPatch(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Scenario resource.
     * @summary Replaces the Scenario resource.
     * @param {ScenarioApiScenariosIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public scenariosIdPut(requestParameters: ScenarioApiScenariosIdPutRequest, options?: AxiosRequestConfig) {

    return ScenarioApiFp(this.configuration).scenariosIdPut(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Scenario resource.
     * @summary Creates a Scenario resource.
     * @param {ScenarioApiScenariosPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScenarioApi
     */
    public scenariosPost(requestParameters: ScenarioApiScenariosPostRequest, options?: AxiosRequestConfig) {

    return ScenarioApiFp(this.configuration).scenariosPost(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}

