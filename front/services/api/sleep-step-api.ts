/* tslint:disable */
/* eslint-disable */
/**
 * Global Testing
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiSleepStepsGetCollection200Response } from '../models';
// @ts-ignore
import { SleepStep } from '../models';
// @ts-ignore
import { SleepStepJsonld } from '../models';
// @ts-ignore
import { SleepStepJsonldSleepstepReadStepRead } from '../models';
/**
 * SleepStepApi - axios parameter creator
 * @export
 */

export const SleepStepApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of SleepStep resources.
         * @summary Retrieves the collection of SleepStep resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sleepStepsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sleep_steps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the SleepStep resource.
         * @summary Removes the SleepStep resource.
         * @param {string} id SleepStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sleepStepsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sleepStepsIdDelete', 'id', id)
            const localVarPath = `/api/sleep_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a SleepStep resource.
         * @summary Retrieves a SleepStep resource.
         * @param {string} id SleepStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sleepStepsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sleepStepsIdGet', 'id', id)
            const localVarPath = `/api/sleep_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the SleepStep resource.
         * @summary Updates the SleepStep resource.
        * @param {string} id
        * @param data SleepStep
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sleepStepsIdPatch: async (id: string, data: SleepStep, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sleepStep' is not null or undefined
            assertParamExists('sleepStepsIdPatch', 'id', id)
            assertParamExists('sleepStepsIdPatch', 'data', data)
            const localVarPath = `/api/sleep_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the SleepStep resource.
         * @summary Replaces the SleepStep resource.
        * @param {string} id
        * @param data SleepStepJsonld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sleepStepsIdPut: async (id: string, data: SleepStepJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sleepStepJsonld' is not null or undefined
            assertParamExists('sleepStepsIdPut', 'id', id)
            assertParamExists('sleepStepsIdPut', 'data', data)
            const localVarPath = `/api/sleep_steps/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a SleepStep resource.
         * @summary Creates a SleepStep resource.
        * @param {SleepStepJsonld} data The new SleepStep resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            sleepStepsPost: async (data: SleepStepJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sleepStepJsonld' is not null or undefined
            assertParamExists('sleepStepsPost', 'data', data)
            const localVarPath = `/api/sleep_steps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * SleepStepApi - functional programming interface
 * @export
 */
export const SleepStepApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SleepStepApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of SleepStep resources.
         * @summary Retrieves the collection of SleepStep resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async sleepStepsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSleepStepsGetCollection200Response>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.sleepStepsGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the SleepStep resource.
         * @summary Removes the SleepStep resource.
         * @param {string} id SleepStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async sleepStepsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.sleepStepsIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a SleepStep resource.
         * @summary Retrieves a SleepStep resource.
         * @param {string} id SleepStep identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async sleepStepsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SleepStepJsonldSleepstepReadStepRead>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.sleepStepsIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the SleepStep resource.
         * @summary Updates the SleepStep resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async sleepStepsIdPatch(id: string, data: SleepStep, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SleepStepJsonldSleepstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.sleepStepsIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the SleepStep resource.
         * @summary Replaces the SleepStep resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async sleepStepsIdPut(id: string, data: SleepStepJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SleepStepJsonldSleepstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.sleepStepsIdPut(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a SleepStep resource.
         * @summary Creates a SleepStep resource.
                    * @param {SleepStepJsonld} data The new SleepStep resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async sleepStepsPost(data: SleepStepJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SleepStepJsonldSleepstepReadStepRead>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.sleepStepsPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Request parameters for sleepStepsGetCollection operation in SleepStepApi.
 * @export
 * @interface SleepStepApiSleepStepsGetCollectionRequest
 */
export interface SleepStepApiSleepStepsGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof SleepStepApiSleepStepsGetCollection
     */
    readonly page?: number
}
/**
 * Request parameters for sleepStepsIdDelete operation in SleepStepApi.
 * @export
 * @interface SleepStepApiSleepStepsIdDeleteRequest
 */
export interface SleepStepApiSleepStepsIdDeleteRequest {
    /**
     * SleepStep identifier
     * @type {string}
     * @memberof SleepStepApiSleepStepsIdDelete
     */
    readonly id: string
}
/**
 * Request parameters for sleepStepsIdGet operation in SleepStepApi.
 * @export
 * @interface SleepStepApiSleepStepsIdGetRequest
 */
export interface SleepStepApiSleepStepsIdGetRequest {
    /**
     * SleepStep identifier
     * @type {string}
     * @memberof SleepStepApiSleepStepsIdGet
     */
    readonly id: string
}
/**
 * Request parameters for sleepStepsIdPatch operation in SleepStepApi.
 * @export
 * @interface SleepStepApiSleepStepsIdPatchRequest
 */
export interface SleepStepApiSleepStepsIdPatchRequest {
    /**
    * The updated SleepStep resource
    * @type {SleepStep}
    * @memberof SleepStepApiSleepStepsIdPatch
    */
    readonly id: string
    readonly data: SleepStep
}
/**
 * Request parameters for sleepStepsIdPut operation in SleepStepApi.
 * @export
 * @interface SleepStepApiSleepStepsIdPutRequest
 */
export interface SleepStepApiSleepStepsIdPutRequest {
    /**
    * The updated SleepStep resource
    * @type {SleepStepJsonld}
    * @memberof SleepStepApiSleepStepsIdPut
    */
    readonly id: string
    readonly data: SleepStepJsonld
}
/**
 * Request parameters for sleepStepsPost operation in SleepStepApi.
 * @export
 * @interface SleepStepApiSleepStepsPostRequest
 */
export interface SleepStepApiSleepStepsPostRequest {
    /**
    * The new SleepStep resource
    * @type {SleepStepJsonld}
    * @memberof SleepStepApiSleepStepsPost
    */
    readonly data: SleepStepJsonld
}
/**
 * SleepStepApi - object-oriented interface
 * @export
 * @class SleepStepApi
 * @extends {BaseAPI}
 */
export class SleepStepApi extends BaseAPI {
    /**
     * Retrieves the collection of SleepStep resources.
     * @summary Retrieves the collection of SleepStep resources.
     * @param {SleepStepApiSleepStepsGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SleepStepApi
     */
    public sleepStepsGetCollection(requestParameters: SleepStepApiSleepStepsGetCollectionRequest = {}, options?: AxiosRequestConfig) {

        return SleepStepApiFp(this.configuration).sleepStepsGetCollection(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the SleepStep resource.
     * @summary Removes the SleepStep resource.
     * @param {SleepStepApiSleepStepsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SleepStepApi
     */
    public sleepStepsIdDelete(requestParameters: SleepStepApiSleepStepsIdDeleteRequest, options?: AxiosRequestConfig) {

        return SleepStepApiFp(this.configuration).sleepStepsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a SleepStep resource.
     * @summary Retrieves a SleepStep resource.
     * @param {SleepStepApiSleepStepsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SleepStepApi
     */
    public sleepStepsIdGet(requestParameters: SleepStepApiSleepStepsIdGetRequest, options?: AxiosRequestConfig) {

        return SleepStepApiFp(this.configuration).sleepStepsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the SleepStep resource.
     * @summary Updates the SleepStep resource.
     * @param {SleepStepApiSleepStepsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SleepStepApi
     */
    public sleepStepsIdPatch(requestParameters: SleepStepApiSleepStepsIdPatchRequest, options?: AxiosRequestConfig) {

    return SleepStepApiFp(this.configuration).sleepStepsIdPatch(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the SleepStep resource.
     * @summary Replaces the SleepStep resource.
     * @param {SleepStepApiSleepStepsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SleepStepApi
     */
    public sleepStepsIdPut(requestParameters: SleepStepApiSleepStepsIdPutRequest, options?: AxiosRequestConfig) {

    return SleepStepApiFp(this.configuration).sleepStepsIdPut(requestParameters.id, requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a SleepStep resource.
     * @summary Creates a SleepStep resource.
     * @param {SleepStepApiSleepStepsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SleepStepApi
     */
    public sleepStepsPost(requestParameters: SleepStepApiSleepStepsPostRequest, options?: AxiosRequestConfig) {

    return SleepStepApiFp(this.configuration).sleepStepsPost(requestParameters.data, options).then((request) => request(this.axios, this.basePath));
    }
}

